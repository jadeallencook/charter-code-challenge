{"version":3,"sources":["hooks/useResults.js","components/Filters.js","components/Table.js","components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["useResults","useState","results","setResults","restaurants","setRestaurants","loaded","setLoaded","state","setState","query","setQuery","genres","setGenres","genre","setGenre","loading","setLoading","useEffect","fetch","headers","Authorization","then","res","json","length","mySet","Set","reduce","array","split","value","add","sort","a","b","toUpperCase","string","toLowerCase","filter","result","indexOf","name","city","Filters","setPage","className","onChange","event","target","placeholder","type","id","states","map","val","key","index","Table","page","telephone","hidden","colSpan","Pagination","style","opacity","onClick","Math","ceil","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5ceda43.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction useResults() {\n  const [results, setResults] = useState([]);\n  const [restaurants, setRestaurants] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [state, setState] = useState('');\n  const [query, setQuery] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [genre, setGenre] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('https://code-challenge.spectrumtoolbox.com/api/restaurants', {\n      headers: {\n        Authorization: 'Api-Key q3MNxtfep8Gt',\n      },\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        setLoading(false);\n        setRestaurants(res);\n      });\n  }, []);\n\n  if (!loaded && restaurants.length) {\n    setResults(restaurants);\n    const mySet = new Set();\n    for (let value of restaurants.reduce(\n      (array, { genre }) => [...array, ...genre.split(',')],\n      []\n    )) {\n      mySet.add(value);\n    }\n    setGenres(\n      [...mySet].sort((a, b) => {\n        a = a.toUpperCase();\n        b = b.toUpperCase();\n        return a < b ? -1 : a > b ? 1 : 0;\n      })\n    );\n    setLoaded(true);\n  }\n\n  useEffect(() => {\n    const string = query.toLowerCase();\n    setResults(\n      restaurants\n        .filter(\n          (result) =>\n            (!state || (state && result.state === state)) &&\n            (!genre || (genre && result.genre.indexOf(genre) !== -1)) &&\n            (!query ||\n              (query && result.name.toLowerCase().indexOf(string) !== -1) ||\n              result.genre.toLowerCase().indexOf(string) !== -1 ||\n              result.city.toLowerCase().indexOf(string) !== -1)\n        )\n        .sort((a, b) => {\n          a = a.name.toUpperCase();\n          b = b.name.toUpperCase();\n          return a < b ? -1 : a > b ? 1 : 0;\n        })\n    );\n  }, [state, genre, restaurants, query]);\n\n  return {\n    results,\n    setRestaurants,\n    state,\n    setState,\n    query,\n    setQuery,\n    genres,\n    genre,\n    setGenre,\n    loading,\n  };\n}\n\nexport default useResults;\n","import React from 'react';\nimport states from '../constants/states.json';\nimport './Filters.css';\n\nexport default function Filters({\n  query,\n  setQuery,\n  state,\n  setState,\n  setPage,\n  genre,\n  setGenre,\n  genres,\n}) {\n  return (\n    <div className=\"Filters\">\n      <input\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n        placeholder=\"Search\"\n        type=\"text\"\n      />\n      <select\n        value={state}\n        id=\"state\"\n        onChange={(event) => {\n          setState(event.target.value);\n          setPage(1);\n        }}\n      >\n        <option value=\"\">ALL STATES</option>\n        {states.map((val) => (\n          <option key={val} value={val}>\n            {val}\n          </option>\n        ))}\n      </select>\n      <select\n        value={genre}\n        id=\"state\"\n        onChange={(event) => {\n          setGenre(event.target.value);\n          setPage(1);\n        }}\n      >\n        <option value=\"\">ALL GENRES</option>\n        {genres.map((val, index) => (\n          <option key={`genre-${index}`} value={val}>\n            {val}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Table.css';\n\nexport default function Table({ results, page }) {\n  return (\n    <table className=\"Table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>City</th>\n          <th>State</th>\n          <th>Telephone</th>\n          <th>Genre</th>\n        </tr>\n      </thead>\n      <tbody>\n        {!results.length ? (\n          <tr>\n            <td className=\"no-results\" colSpan=\"5\">\n              No Results\n            </td>\n          </tr>\n        ) : (\n          results.map(({ id, name, city, state, telephone, genre }, index) => {\n            return (\n              <tr\n                key={id}\n                hidden={index >= page * 10 || index <= page * 10 - 11}\n              >\n                <td>{name}</td>\n                <td>{city}</td>\n                <td>{state}</td>\n                <td>{telephone}</td>\n                <td>{genre}</td>\n              </tr>\n            );\n          })\n        )}\n      </tbody>\n    </table>\n  );\n}\n","import React from 'react';\nimport './Pagination.css';\n\nexport default function Pagination({ page, setPage, results }) {\n  return (\n    <ul className=\"Pagination\">\n      <li\n        style={page <= 1 ? { opacity: 0.5 } : null}\n        onClick={() => setPage(page <= 1 ? 1 : page - 1)}\n      >\n        Previous\n      </li>\n      <li>{page}</li>\n      <li\n        style={Math.ceil(results.length / 10) <= page ? { opacity: 0.5 } : null}\n        onClick={() =>\n          setPage(Math.ceil(results.length / 10) <= page ? page : page + 1)\n        }\n      >\n        Next\n      </li>\n    </ul>\n  );\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport useResults from './hooks/useResults';\nimport Filters from './components/Filters';\nimport Table from './components/Table';\nimport Pagination from './components/Pagination';\n\nfunction App() {\n  const {\n    results,\n    state,\n    setState,\n    query,\n    setQuery,\n    genres,\n    genre,\n    setGenre,\n    loading,\n  } = useResults();\n  const [page, setPage] = useState(1);\n\n  return (\n    <div className=\"App\">\n      <h1>Charter Code Challenge</h1>\n      <Filters\n        query={query}\n        setQuery={setQuery}\n        state={state}\n        setState={setState}\n        setPage={setPage}\n        genre={genre}\n        setGenre={setGenre}\n        genres={genres}\n      />\n      {loading ? (\n        <h2>Loading Results...</h2>\n      ) : (\n        <Table results={results} page={page} />\n      )}\n      <Pagination page={page} setPage={setPage} results={results} />\n      <footer>Charter Code Challenge | Developed by @jadeallencook</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}